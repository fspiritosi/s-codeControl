create extension if not exists "pg_cron" with schema "public" version '1.4-1';

create type "public"."affiliate_status_enum" as enum ('Dentro de convenio', 'Fuera de convenio');

create type "public"."document_applies" as enum ('Persona', 'Equipos');

create type "public"."document_type_enum" as enum ('DNI', 'LE', 'LC', 'PASAPORTE');

create type "public"."gender_enum" as enum ('Masculino', 'Femenino', 'No Declarado');

create type "public"."level_of_education_enum" as enum ('Primario', 'Secundario', 'Terciario', 'Universitario', 'PosGrado');

create type "public"."marital_status_enum" as enum ('Casado', 'Soltero', 'Divorciado', 'Viudo', 'Separado');

create type "public"."nationality_enum" as enum ('Argentina', 'Extranjero');

create type "public"."notification_categories" as enum ('vencimiento', 'noticia', 'advertencia', 'aprobado', 'rechazado');

create type "public"."reason_for_termination_enum" as enum ('Despido sin causa', 'Renuncia', 'Despido con causa', 'Acuerdo de partes', 'Fin de contrato');

create type "public"."roles_enum" as enum ('Externo', 'Auditor');

create type "public"."state" as enum ('presentado', 'rechazado', 'aprobado', 'vencido', 'pendiente');

create type "public"."status_type" as enum ('Avalado', 'No avalado');

create type "public"."type_of_contract_enum" as enum ('Per√≠odo de prueba', 'A tiempo indeterminado', 'Plazo fijo');

create sequence "public"."documents_employees_logs_id_seq";

create table "public"."brand_vehicles" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text
);


alter table "public"."brand_vehicles" enable row level security;

create table "public"."cities" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "province_id" bigint not null,
    "name" text not null
);


alter table "public"."cities" enable row level security;

create table "public"."companies_employees" (
    "employee_id" uuid not null,
    "id" uuid not null default gen_random_uuid(),
    "company_id" uuid
);


alter table "public"."companies_employees" enable row level security;

create table "public"."company" (
    "id" uuid not null default uuid_generate_v4(),
    "company_name" character varying(255) not null,
    "description" text not null,
    "website" character varying(255),
    "contact_email" character varying(255) not null,
    "contact_phone" character varying(20) not null,
    "address" character varying(255) not null,
    "city" bigint not null,
    "country" character varying(100) not null,
    "industry" text not null,
    "company_logo" text,
    "is_active" boolean not null default true,
    "company_cuit" text not null,
    "province_id" bigint,
    "owner_id" uuid,
    "by_defect" boolean default false
);


alter table "public"."company" enable row level security;

create table "public"."contractor_employee" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "employee_id" uuid,
    "contractor_id" uuid
);


alter table "public"."contractor_employee" enable row level security;

create table "public"."contractors" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "name" text not null
);


alter table "public"."contractors" enable row level security;

create table "public"."countries" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "name" text not null
);


alter table "public"."countries" enable row level security;

create table "public"."document_types" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "name" text not null,
    "applies" document_applies not null,
    "multiresource" boolean not null,
    "mandatory" boolean not null,
    "explired" boolean not null,
    "special" boolean not null,
    "is_active" boolean not null default true,
    "description" text,
    "company_id" uuid
);


alter table "public"."document_types" enable row level security;

create table "public"."documents_employees" (
    "created_at" timestamp with time zone not null default now(),
    "id_document_types" uuid,
    "validity" text,
    "state" state not null default 'pendiente'::state,
    "is_active" boolean default true,
    "id" uuid not null default gen_random_uuid(),
    "user_id" uuid,
    "applies" uuid,
    "deny_reason" text,
    "document_path" text
);


alter table "public"."documents_employees" enable row level security;

create table "public"."documents_employees_logs" (
    "id" integer not null default nextval('documents_employees_logs_id_seq'::regclass),
    "documents_employees_id" uuid not null,
    "modified_by" uuid not null,
    "updated_at" timestamp with time zone not null default now()
);


create table "public"."documents_equipment" (
    "created_at" timestamp with time zone not null default now(),
    "id_document_types" uuid,
    "applies" uuid,
    "validity" text,
    "state" state default 'pendiente'::state,
    "is_active" boolean default true,
    "id" uuid not null default gen_random_uuid(),
    "user_id" uuid,
    "deny_reason" text,
    "document_path" text
);


alter table "public"."documents_equipment" enable row level security;

create table "public"."documents_equipment_logs" (
    "id" integer not null default nextval('documents_employees_logs_id_seq'::regclass),
    "documents_equipment_id" uuid not null,
    "modified_by" uuid not null,
    "updated_at" timestamp with time zone not null default now()
);


create table "public"."employees" (
    "created_at" timestamp with time zone not null default now(),
    "picture" text not null,
    "nationality" nationality_enum not null,
    "lastname" text not null,
    "firstname" text not null,
    "cuil" text not null,
    "document_type" document_type_enum not null,
    "document_number" text not null,
    "birthplace" uuid not null,
    "gender" gender_enum,
    "marital_status" marital_status_enum,
    "level_of_education" level_of_education_enum,
    "street" text not null,
    "street_number" text not null,
    "province" bigint not null,
    "postal_code" text,
    "phone" text not null,
    "email" text,
    "file" text not null,
    "normal_hours" text,
    "date_of_admission" date not null,
    "affiliate_status" affiliate_status_enum,
    "company_position" text,
    "city" bigint not null,
    "hierarchical_position" uuid,
    "workflow_diagram" uuid,
    "type_of_contract" type_of_contract_enum not null,
    "id" uuid not null default gen_random_uuid(),
    "allocated_to" uuid[],
    "company_id" uuid,
    "is_active" boolean default true,
    "reason_for_termination" reason_for_termination_enum,
    "termination_date" date,
    "status" status_type default 'No avalado'::status_type
);


alter table "public"."employees" enable row level security;

create table "public"."hierarchy" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "name" text not null
);


alter table "public"."hierarchy" enable row level security;

create table "public"."industry_type" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text
);


alter table "public"."industry_type" enable row level security;

create table "public"."model_vehicles" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text,
    "brand" bigint
);


alter table "public"."model_vehicles" enable row level security;

create table "public"."notifications" (
    "id" uuid not null default gen_random_uuid(),
    "title" text,
    "description" text,
    "category" notification_categories,
    "company_id" uuid,
    "created_at" timestamp with time zone default now(),
    "document_id" uuid,
    "reference" text
);


alter table "public"."notifications" enable row level security;

create table "public"."profile" (
    "id" uuid not null,
    "created_at" timestamp with time zone default now(),
    "credential_id" uuid,
    "email" text,
    "avatar" text,
    "fullname" text,
    "role" text default 'User'::text
);


alter table "public"."profile" enable row level security;

create table "public"."provinces" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text not null
);


alter table "public"."provinces" enable row level security;

create table "public"."roles" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text not null,
    "is_active" boolean default true,
    "intern" boolean default false
);


alter table "public"."roles" enable row level security;

create table "public"."share_company_users" (
    "created_at" timestamp with time zone not null default now(),
    "profile_id" uuid default gen_random_uuid(),
    "company_id" uuid default gen_random_uuid(),
    "id" uuid not null default gen_random_uuid(),
    "role" text
);


alter table "public"."share_company_users" enable row level security;

create table "public"."type" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "name" text
);


alter table "public"."type" enable row level security;

create table "public"."types_of_vehicles" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text
);


alter table "public"."types_of_vehicles" enable row level security;

create table "public"."vehicles" (
    "created_at" timestamp with time zone not null default now(),
    "picture" text not null,
    "type_of_vehicle" bigint not null,
    "domain" text,
    "chassis" text,
    "engine" text not null,
    "serie" text,
    "intern_number" text not null,
    "year" text not null,
    "brand" bigint not null,
    "model" bigint not null,
    "is_active" boolean default true,
    "termination_date" date,
    "reason_for_termination" text,
    "user_id" uuid default auth.uid(),
    "company_id" uuid,
    "id" uuid not null default gen_random_uuid(),
    "type" uuid not null,
    "status" status_type default 'No avalado'::status_type,
    "allocated_to" uuid[]
);


alter table "public"."vehicles" enable row level security;

create table "public"."work-diagram" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "name" text not null
);


alter table "public"."work-diagram" enable row level security;

alter sequence "public"."documents_employees_logs_id_seq" owned by "public"."documents_employees_logs"."id";

CREATE UNIQUE INDEX brand_vehicles_name_key ON public.brand_vehicles USING btree (name);

CREATE UNIQUE INDEX brand_vehicles_pkey ON public.brand_vehicles USING btree (id);

CREATE INDEX cities_province_id_idx ON public.cities USING btree (province_id);

CREATE UNIQUE INDEX citys_pkey ON public.cities USING btree (id);

CREATE INDEX companies_employees_company_id_idx ON public.companies_employees USING btree (company_id);

CREATE UNIQUE INDEX companies_employees_cuil_key ON public.employees USING btree (cuil);

CREATE UNIQUE INDEX companies_employees_document_number_key ON public.employees USING btree (document_number);

CREATE INDEX companies_employees_employee_id_idx ON public.companies_employees USING btree (employee_id);

CREATE UNIQUE INDEX companies_employees_pkey ON public.employees USING btree (id);

CREATE UNIQUE INDEX companies_employees_pkey1 ON public.companies_employees USING btree (id);

CREATE UNIQUE INDEX companies_pkey ON public.company USING btree (id);

CREATE UNIQUE INDEX company_compay_cuit_key ON public.company USING btree (company_cuit);

CREATE UNIQUE INDEX "contractor-companies_pkey" ON public.contractors USING btree (id);

CREATE UNIQUE INDEX contractor_employee_pkey ON public.contractor_employee USING btree (id);

CREATE UNIQUE INDEX countries_pkey ON public.countries USING btree (id);

CREATE UNIQUE INDEX document_types_name_key ON public.document_types USING btree (name);

CREATE UNIQUE INDEX document_types_pkey ON public.document_types USING btree (id);

CREATE UNIQUE INDEX documents_employees_docoment_path_key ON public.documents_employees USING btree (document_path);

CREATE UNIQUE INDEX documents_employees_logs_pkey ON public.documents_employees_logs USING btree (id);

CREATE UNIQUE INDEX documents_equipment_document_path_key ON public.documents_equipment USING btree (document_path);

CREATE UNIQUE INDEX documents_equipment_logs_pkey ON public.documents_equipment_logs USING btree (id);

CREATE UNIQUE INDEX documents_equipment_pkey ON public.documents_equipment USING btree (id);

CREATE UNIQUE INDEX documents_pkey ON public.documents_employees USING btree (id);

CREATE UNIQUE INDEX hierarchy_pkey ON public.hierarchy USING btree (id);

CREATE UNIQUE INDEX industry_type_pkey ON public.industry_type USING btree (id);

CREATE UNIQUE INDEX industry_type_type_key ON public.industry_type USING btree (name);

CREATE UNIQUE INDEX model_vehicles_pkey ON public.model_vehicles USING btree (id);

CREATE UNIQUE INDEX notifications_pkey ON public.notifications USING btree (id);

CREATE UNIQUE INDEX "profile_credentialId_key" ON public.profile USING btree (credential_id);

CREATE UNIQUE INDEX profile_email_key ON public.profile USING btree (email);

CREATE UNIQUE INDEX profile_pkey ON public.profile USING btree (id);

CREATE UNIQUE INDEX provinces_id_key ON public.provinces USING btree (id);

CREATE UNIQUE INDEX provinces_pkey ON public.provinces USING btree (id);

CREATE UNIQUE INDEX roles_name_key ON public.roles USING btree (name);

CREATE UNIQUE INDEX roles_pkey ON public.roles USING btree (id);

CREATE UNIQUE INDEX share_company_users_id2_key ON public.share_company_users USING btree (id);

CREATE UNIQUE INDEX share_company_users_pkey ON public.share_company_users USING btree (id);

CREATE UNIQUE INDEX type_pkey ON public.type USING btree (id);

CREATE UNIQUE INDEX types_of_vehicles_pkey ON public.types_of_vehicles USING btree (id);

CREATE UNIQUE INDEX vehicles_domain_key ON public.vehicles USING btree (domain);

CREATE UNIQUE INDEX vehicles_id2_key ON public.vehicles USING btree (id);

CREATE UNIQUE INDEX vehicles_pkey ON public.vehicles USING btree (id);

CREATE UNIQUE INDEX "work-diagram_pkey" ON public."work-diagram" USING btree (id);

alter table "public"."brand_vehicles" add constraint "brand_vehicles_pkey" PRIMARY KEY using index "brand_vehicles_pkey";

alter table "public"."cities" add constraint "citys_pkey" PRIMARY KEY using index "citys_pkey";

alter table "public"."companies_employees" add constraint "companies_employees_pkey1" PRIMARY KEY using index "companies_employees_pkey1";

alter table "public"."company" add constraint "companies_pkey" PRIMARY KEY using index "companies_pkey";

alter table "public"."contractor_employee" add constraint "contractor_employee_pkey" PRIMARY KEY using index "contractor_employee_pkey";

alter table "public"."contractors" add constraint "contractor-companies_pkey" PRIMARY KEY using index "contractor-companies_pkey";

alter table "public"."countries" add constraint "countries_pkey" PRIMARY KEY using index "countries_pkey";

alter table "public"."document_types" add constraint "document_types_pkey" PRIMARY KEY using index "document_types_pkey";

alter table "public"."documents_employees" add constraint "documents_pkey" PRIMARY KEY using index "documents_pkey";

alter table "public"."documents_employees_logs" add constraint "documents_employees_logs_pkey" PRIMARY KEY using index "documents_employees_logs_pkey";

alter table "public"."documents_equipment" add constraint "documents_equipment_pkey" PRIMARY KEY using index "documents_equipment_pkey";

alter table "public"."documents_equipment_logs" add constraint "documents_equipment_logs_pkey" PRIMARY KEY using index "documents_equipment_logs_pkey";

alter table "public"."employees" add constraint "companies_employees_pkey" PRIMARY KEY using index "companies_employees_pkey";

alter table "public"."hierarchy" add constraint "hierarchy_pkey" PRIMARY KEY using index "hierarchy_pkey";

alter table "public"."industry_type" add constraint "industry_type_pkey" PRIMARY KEY using index "industry_type_pkey";

alter table "public"."model_vehicles" add constraint "model_vehicles_pkey" PRIMARY KEY using index "model_vehicles_pkey";

alter table "public"."notifications" add constraint "notifications_pkey" PRIMARY KEY using index "notifications_pkey";

alter table "public"."profile" add constraint "profile_pkey" PRIMARY KEY using index "profile_pkey";

alter table "public"."provinces" add constraint "provinces_pkey" PRIMARY KEY using index "provinces_pkey";

alter table "public"."roles" add constraint "roles_pkey" PRIMARY KEY using index "roles_pkey";

alter table "public"."share_company_users" add constraint "share_company_users_pkey" PRIMARY KEY using index "share_company_users_pkey";

alter table "public"."type" add constraint "type_pkey" PRIMARY KEY using index "type_pkey";

alter table "public"."types_of_vehicles" add constraint "types_of_vehicles_pkey" PRIMARY KEY using index "types_of_vehicles_pkey";

alter table "public"."vehicles" add constraint "vehicles_pkey" PRIMARY KEY using index "vehicles_pkey";

alter table "public"."work-diagram" add constraint "work-diagram_pkey" PRIMARY KEY using index "work-diagram_pkey";

alter table "public"."brand_vehicles" add constraint "brand_vehicles_name_key" UNIQUE using index "brand_vehicles_name_key";

alter table "public"."cities" add constraint "cities_province_id_fkey" FOREIGN KEY (province_id) REFERENCES provinces(id) ON UPDATE CASCADE not valid;

alter table "public"."cities" validate constraint "cities_province_id_fkey";

alter table "public"."companies_employees" add constraint "companies_employees_company_id_fkey" FOREIGN KEY (company_id) REFERENCES company(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."companies_employees" validate constraint "companies_employees_company_id_fkey";

alter table "public"."companies_employees" add constraint "companies_employees_employee_id_fkey" FOREIGN KEY (employee_id) REFERENCES employees(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."companies_employees" validate constraint "companies_employees_employee_id_fkey";

alter table "public"."company" add constraint "company_city_fkey" FOREIGN KEY (city) REFERENCES cities(id) not valid;

alter table "public"."company" validate constraint "company_city_fkey";

alter table "public"."company" add constraint "company_compay_cuit_key" UNIQUE using index "company_compay_cuit_key";

alter table "public"."company" add constraint "company_owner_id_fkey" FOREIGN KEY (owner_id) REFERENCES profile(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."company" validate constraint "company_owner_id_fkey";

alter table "public"."company" add constraint "company_province_id_fkey" FOREIGN KEY (province_id) REFERENCES provinces(id) not valid;

alter table "public"."company" validate constraint "company_province_id_fkey";

alter table "public"."contractor_employee" add constraint "contractor_employee_contractor_id_fkey" FOREIGN KEY (contractor_id) REFERENCES contractors(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."contractor_employee" validate constraint "contractor_employee_contractor_id_fkey";

alter table "public"."contractor_employee" add constraint "contractor_employee_employee_id_fkey" FOREIGN KEY (employee_id) REFERENCES employees(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."contractor_employee" validate constraint "contractor_employee_employee_id_fkey";

alter table "public"."document_types" add constraint "document_types_company_id_fkey" FOREIGN KEY (company_id) REFERENCES company(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."document_types" validate constraint "document_types_company_id_fkey";

alter table "public"."document_types" add constraint "document_types_name_key" UNIQUE using index "document_types_name_key";

alter table "public"."documents_employees" add constraint "documents_employees_applies_fkey" FOREIGN KEY (applies) REFERENCES employees(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."documents_employees" validate constraint "documents_employees_applies_fkey";

alter table "public"."documents_employees" add constraint "documents_employees_docoment_path_key" UNIQUE using index "documents_employees_docoment_path_key";

alter table "public"."documents_employees" add constraint "documents_employees_id_document_types_fkey" FOREIGN KEY (id_document_types) REFERENCES document_types(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."documents_employees" validate constraint "documents_employees_id_document_types_fkey";

alter table "public"."documents_employees" add constraint "documents_employees_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profile(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."documents_employees" validate constraint "documents_employees_user_id_fkey";

alter table "public"."documents_employees_logs" add constraint "public_documents_employees_logs_documents_employees_id_fkey" FOREIGN KEY (documents_employees_id) REFERENCES documents_employees(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."documents_employees_logs" validate constraint "public_documents_employees_logs_documents_employees_id_fkey";

alter table "public"."documents_equipment" add constraint "documents_equipment_applies_fkey" FOREIGN KEY (applies) REFERENCES vehicles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."documents_equipment" validate constraint "documents_equipment_applies_fkey";

alter table "public"."documents_equipment" add constraint "documents_equipment_document_path_key" UNIQUE using index "documents_equipment_document_path_key";

alter table "public"."documents_equipment" add constraint "documents_equipment_id_document_types_fkey" FOREIGN KEY (id_document_types) REFERENCES document_types(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."documents_equipment" validate constraint "documents_equipment_id_document_types_fkey";

alter table "public"."documents_equipment" add constraint "documents_equipment_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profile(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."documents_equipment" validate constraint "documents_equipment_user_id_fkey";

alter table "public"."documents_equipment_logs" add constraint "public_documents_equipment_logs_documents_equipment_id_fkey" FOREIGN KEY (documents_equipment_id) REFERENCES documents_equipment(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."documents_equipment_logs" validate constraint "public_documents_equipment_logs_documents_equipment_id_fkey";

alter table "public"."employees" add constraint "companies_employees_cuil_key" UNIQUE using index "companies_employees_cuil_key";

alter table "public"."employees" add constraint "companies_employees_document_number_key" UNIQUE using index "companies_employees_document_number_key";

alter table "public"."employees" add constraint "employees_birthplace_fkey" FOREIGN KEY (birthplace) REFERENCES countries(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."employees" validate constraint "employees_birthplace_fkey";

alter table "public"."employees" add constraint "employees_city_fkey" FOREIGN KEY (city) REFERENCES cities(id) not valid;

alter table "public"."employees" validate constraint "employees_city_fkey";

alter table "public"."employees" add constraint "employees_company_id_fkey" FOREIGN KEY (company_id) REFERENCES company(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."employees" validate constraint "employees_company_id_fkey";

alter table "public"."employees" add constraint "employees_hierarchical_position_fkey" FOREIGN KEY (hierarchical_position) REFERENCES hierarchy(id) not valid;

alter table "public"."employees" validate constraint "employees_hierarchical_position_fkey";

alter table "public"."employees" add constraint "employees_province_fkey" FOREIGN KEY (province) REFERENCES provinces(id) not valid;

alter table "public"."employees" validate constraint "employees_province_fkey";

alter table "public"."employees" add constraint "employees_workflow_diagram_fkey" FOREIGN KEY (workflow_diagram) REFERENCES "work-diagram"(id) not valid;

alter table "public"."employees" validate constraint "employees_workflow_diagram_fkey";

alter table "public"."industry_type" add constraint "industry_type_type_key" UNIQUE using index "industry_type_type_key";

alter table "public"."model_vehicles" add constraint "public_model_vehicles_brand_fkey" FOREIGN KEY (brand) REFERENCES brand_vehicles(id) not valid;

alter table "public"."model_vehicles" validate constraint "public_model_vehicles_brand_fkey";

alter table "public"."notifications" add constraint "public_notifications_company_id_fkey" FOREIGN KEY (company_id) REFERENCES company(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."notifications" validate constraint "public_notifications_company_id_fkey";

alter table "public"."profile" add constraint "profile_credentialId_key" UNIQUE using index "profile_credentialId_key";

alter table "public"."profile" add constraint "profile_credential_id_fkey" FOREIGN KEY (credential_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."profile" validate constraint "profile_credential_id_fkey";

alter table "public"."profile" add constraint "profile_email_key" UNIQUE using index "profile_email_key";

alter table "public"."profile" add constraint "profile_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."profile" validate constraint "profile_id_fkey";

alter table "public"."profile" add constraint "profile_role_fkey" FOREIGN KEY (role) REFERENCES roles(name) not valid;

alter table "public"."profile" validate constraint "profile_role_fkey";

alter table "public"."provinces" add constraint "provinces_id_key" UNIQUE using index "provinces_id_key";

alter table "public"."roles" add constraint "roles_name_key" UNIQUE using index "roles_name_key";

alter table "public"."share_company_users" add constraint "public_share_company_users_company_id_fkey" FOREIGN KEY (company_id) REFERENCES company(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."share_company_users" validate constraint "public_share_company_users_company_id_fkey";

alter table "public"."share_company_users" add constraint "public_share_company_users_profile_id_fkey" FOREIGN KEY (profile_id) REFERENCES profile(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."share_company_users" validate constraint "public_share_company_users_profile_id_fkey";

alter table "public"."share_company_users" add constraint "share_company_users_id2_key" UNIQUE using index "share_company_users_id2_key";

alter table "public"."share_company_users" add constraint "share_company_users_role_fkey" FOREIGN KEY (role) REFERENCES roles(name) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."share_company_users" validate constraint "share_company_users_role_fkey";

alter table "public"."vehicles" add constraint "public_vehicles_model_fkey" FOREIGN KEY (model) REFERENCES model_vehicles(id) not valid;

alter table "public"."vehicles" validate constraint "public_vehicles_model_fkey";

alter table "public"."vehicles" add constraint "public_vehicles_type_fkey" FOREIGN KEY (type) REFERENCES type(id) not valid;

alter table "public"."vehicles" validate constraint "public_vehicles_type_fkey";

alter table "public"."vehicles" add constraint "vehicles_brand_fkey" FOREIGN KEY (brand) REFERENCES brand_vehicles(id) not valid;

alter table "public"."vehicles" validate constraint "vehicles_brand_fkey";

alter table "public"."vehicles" add constraint "vehicles_company_id_fkey" FOREIGN KEY (company_id) REFERENCES company(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."vehicles" validate constraint "vehicles_company_id_fkey";

alter table "public"."vehicles" add constraint "vehicles_domain_key" UNIQUE using index "vehicles_domain_key";

alter table "public"."vehicles" add constraint "vehicles_id2_key" UNIQUE using index "vehicles_id2_key";

alter table "public"."vehicles" add constraint "vehicles_type_of_vehicle_fkey" FOREIGN KEY (type_of_vehicle) REFERENCES types_of_vehicles(id) not valid;

alter table "public"."vehicles" validate constraint "vehicles_type_of_vehicle_fkey";

alter table "public"."vehicles" add constraint "vehicles_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profile(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."vehicles" validate constraint "vehicles_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.actualizar_estado_documentos()
 RETURNS void
 LANGUAGE plpgsql
AS $function$BEGIN
set
  datestyle = 'ISO, DMY';

update documents_employees
set
  state = 'vencido'
where
  validity::date < current_date;

update documents_equipment
set
  state = 'vencido'
where
   validity::date < current_date;
END;
-- DECLARE
--     v_company_id UUID;
--     resource TEXT; -- Variable para almacenar el company_id
-- BEGIN
-- SET datestyle = 'ISO, DMY';

--     -- Verificar si hay documentos vencidos en documents_employees
--     UPDATE documents_employees
--     SET state = 'vencido'
--     WHERE validity < CURRENT_DATE
--     AND state <> 'vencido'; -- Solo si el estado no es ya 'vencido'

--     -- Verificar si hay documentos vencidos en documents_equipment
--     UPDATE documents_equipment
--     SET state = 'vencido'
--     WHERE validity < CURRENT_DATE
--     AND state <> 'vencido'; -- Solo si el estado no es ya 'vencido'

--     resource := 'employee';

--     -- Insertar entrada en la tabla notifications si se cambi√≥ el estado
--     IF SQL%ROWCOUNT > 0 THEN
--         IF v_company_id IS NULL THEN
--             -- Si no se encontr√≥ en documents_employees, buscar en documents_equipment
--             SELECT company_id INTO v_company_id
--             FROM documents_equipment
--             WHERE documents_equipment.id = NEW.id;
--             resource :='equipment';
--         END IF;

--             INSERT INTO notifications (title, description, category, company_id, document_id,reference)
--             VALUES ('Venci√≥ un documento', '', 'vencimiento', v_company_id, NEW.id,resource);
--     END IF;
-- END;$function$
;

CREATE OR REPLACE FUNCTION public.add_new_document()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
DECLARE
  company_owner_id UUID;
  vehicle_id UUID;
  employee_id UUID;
BEGIN
  IF NEW.mandatory THEN
    IF NEW.applies = 'Equipos' THEN
      IF NEW.company_id IS NULL THEN
        FOR company_owner_id IN SELECT owner_id FROM company LOOP
          FOR vehicle_id IN SELECT id FROM vehicles WHERE company_id = company_owner_id LOOP
            INSERT INTO documents_equipment (id_document_types, applies, validity, state, is_active, user_id, deny_reason, document_path)
            VALUES (NEW.id, vehicle_id, NULL, 'pendiente', TRUE, company_owner_id, NULL, NULL);
          END LOOP;
        END LOOP;
      ELSE
        SELECT owner_id INTO company_owner_id FROM company WHERE id = NEW.company_id;
        FOR vehicle_id IN SELECT id FROM vehicles WHERE company_id = NEW.company_id LOOP
          INSERT INTO documents_equipment (id_document_types, applies, validity, state, is_active, user_id, deny_reason, document_path)
          VALUES (NEW.id, vehicle_id, NULL, 'pendiente', TRUE, company_owner_id, NULL, NULL);
        END LOOP;
      END IF;
    ELSIF NEW.applies = 'Persona' THEN
      IF NEW.company_id IS NULL THEN
        FOR company_owner_id IN SELECT owner_id FROM company LOOP
          FOR employee_id IN SELECT id FROM employees WHERE company_id = company_owner_id LOOP
            INSERT INTO documents_employees (id_document_types, applies, validity, state, is_active, user_id, deny_reason, document_path)
            VALUES (NEW.id, employee_id, NULL, 'pendiente', TRUE, company_owner_id, NULL, NULL);
          END LOOP;
        END LOOP;
      ELSE
        SELECT owner_id INTO company_owner_id FROM company WHERE id = NEW.company_id;
        FOR employee_id IN SELECT id FROM employees WHERE company_id = NEW.company_id LOOP
          INSERT INTO documents_employees (id_document_types, applies, validity, state, is_active, user_id, deny_reason, document_path)
          VALUES (NEW.id, employee_id, NULL, 'pendiente', TRUE, company_owner_id, NULL, NULL);
        END LOOP;
      END IF;
    END IF;
  END IF;
  RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.add_to_companies_employees()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$DECLARE
  contractor_id UUID;
BEGIN
  -- Insertar en companies_employees
  INSERT INTO companies_employees (company_id, employee_id)
  VALUES (NEW.company_id, NEW.id);

  -- Verificar si NEW.allocated_to no est√° vac√≠o
  IF NEW.allocated_to IS NOT NULL AND array_length(NEW.allocated_to, 1) > 0 THEN
    -- Insertar en contractor_employee para cada ID en allocated_to
    FOREACH contractor_id IN ARRAY NEW.allocated_to
    LOOP
      INSERT INTO contractor_employee (contractor_id, employee_id)
      VALUES (contractor_id, NEW.id);
    END LOOP;
  END IF;

  RETURN NEW;
END;$function$
;

CREATE OR REPLACE FUNCTION public.create_user_for_external_login()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
  IF NEW.raw_user_meta_data <> '{}'::jsonb THEN
    INSERT INTO public.profile (id, fullname, email, credential_id, avatar,role)
    VALUES (
      NEW.id,
      NEW.raw_user_meta_data->>'full_name',
      NEW.raw_user_meta_data->>'email',
      NEW.id,
      NEW.raw_user_meta_data->>'avatar_url',
      'CodeControlClient'
    );
  END IF;
  RETURN NEW;
END;$function$
;

CREATE OR REPLACE FUNCTION public.enviar_correos_documentos_a_vencer()
 RETURNS void
 LANGUAGE plpgsql
AS $function$DECLARE
    destinatario TEXT;
    asunto TEXT;
    contenido TEXT;
    documentos_usuario TEXT[];
    documento RECORD;
BEGIN
    -- Obtener todos los destinatarios √∫nicos
    FOR destinatario IN SELECT DISTINCT profile.email FROM profile
    LOOP
        -- Inicializar el contenido del correo electr√≥nico para el destinatario actual
        contenido := '';

        -- Obtener todos los documentos para el destinatario actual
        SELECT 
            array_agg(
                E'<br>Tipo de documento: ' || tipo_documento ||
                'Fecha de vencimiento: ' || fecha_vencimiento ||
                CASE WHEN documento_empleado IS NOT NULL THEN ' Documento del empleado: ' || documento_empleado ELSE '' END ||
                CASE WHEN dominio_vehiculo IS NOT NULL THEN ' Dominio del veh√≠culo: ' || dominio_vehiculo ELSE '' END
            )
        INTO documentos_usuario
        FROM (
            SELECT 
                dt.name AS tipo_documento, 
                TO_DATE(de.validity, 'DD-MM-YYYY') AS fecha_vencimiento,
                e.document_number AS documento_empleado,
                v.domain AS dominio_vehiculo
            FROM 
                documents_employees de
            JOIN 
                profile ON de.user_id = profile.id
            JOIN 
                document_types dt ON de.id_document_types = dt.id
            LEFT JOIN
                employees e ON de.applies = e.id
            LEFT JOIN
                vehicles v ON de.applies = v.id
            WHERE 
                TO_DATE(de.validity, 'DD-MM-YYYY') >= CURRENT_DATE
                AND TO_DATE(de.validity, 'DD-MM-YYYY') < DATE_TRUNC('month', CURRENT_DATE) + INTERVAL '45 days'
                AND profile.email = destinatario
            UNION ALL
            SELECT 
                dt.name AS tipo_documento, 
                TO_DATE(de.validity, 'DD-MM-YYYY') AS fecha_vencimiento,
                NULL AS documento_empleado,
                v.domain AS dominio_vehiculo
            FROM 
                documents_equipment de
            JOIN 
                profile ON de.user_id = profile.id
            JOIN 
                document_types dt ON de.id_document_types = dt.id
            LEFT JOIN
                vehicles v ON de.applies = v.id
            WHERE 
                TO_DATE(de.validity, 'DD-MM-YYYY') >= CURRENT_DATE
                AND TO_DATE(de.validity, 'DD-MM-YYYY') < DATE_TRUNC('month', CURRENT_DATE) + INTERVAL '1 month'
                AND profile.email = destinatario
        ) AS documentos;

        -- Construir el contenido del correo electr√≥nico
        contenido := array_to_string(documentos_usuario, '\n');

        -- Construir el asunto del correo electr√≥nico
        asunto := 'Documentos por vencer';

        -- Enviar el correo electr√≥nico al destinatario actual
        PERFORM net.http_post(
            url := 'https://zktcbhhlcksopklpnubj.supabase.co/functions/v1/resend',
            body := jsonb_build_object(
                'from', 'Codecontrol <team@codecontrol.com.ar>',
                'to', jsonb_build_array(destinatario),
                'subject', asunto,
                'html', contenido
            )
        );
    END LOOP;
END;$function$
;

CREATE OR REPLACE FUNCTION public.enviar_documentos_a_45_dias()
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
    destinatario TEXT;
    asunto TEXT;
    contenido TEXT;
    documentos_usuario TEXT[];
    documento RECORD;
BEGIN
    -- Obtener todos los destinatarios √∫nicos
    FOR destinatario IN SELECT DISTINCT profile.email FROM profile
    LOOP
        -- Inicializar el contenido del correo electr√≥nico para el destinatario actual
        contenido := '';

        -- Obtener todos los documentos para el destinatario actual
        SELECT 
            array_agg(
                E'<br>Tipo de documento: ' || tipo_documento ||
                '<br>Fecha de vencimiento: ' || fecha_vencimiento ||
                CASE WHEN documento_empleado IS NOT NULL THEN '<br>Documento del empleado: ' || documento_empleado ELSE '' END ||
                CASE WHEN dominio_vehiculo IS NOT NULL THEN '<br>Dominio del veh√≠culo: ' || dominio_vehiculo ELSE '' END
            )
        INTO documentos_usuario
        FROM (
            SELECT 
                dt.name AS tipo_documento, 
                TO_DATE(de.validity, 'DD-MM-YYYY') AS fecha_vencimiento,
                e.document_number AS documento_empleado,
                v.domain AS dominio_vehiculo
            FROM 
                documents_employees de
            JOIN 
                profile ON de.user_id = profile.id
            JOIN 
                document_types dt ON de.id_document_types = dt.id
            LEFT JOIN
                employees e ON de.applies = e.id
            LEFT JOIN
                vehicles v ON de.applies = v.id
            WHERE 
                TO_DATE(de.validity, 'DD-MM-YYYY') >= CURRENT_DATE
                AND TO_DATE(de.validity, 'DD-MM-YYYY') < DATE_TRUNC('month', CURRENT_DATE) + INTERVAL '45 days'
                AND profile.email = destinatario
            UNION ALL
            SELECT 
                dt.name AS tipo_documento, 
                TO_DATE(de.validity, 'DD-MM-YYYY') AS fecha_vencimiento,
                NULL AS documento_empleado,
                v.domain AS dominio_vehiculo
            FROM 
                documents_equipment de
            JOIN 
                profile ON de.user_id = profile.id
            JOIN 
                document_types dt ON de.id_document_types = dt.id
            LEFT JOIN
                vehicles v ON de.applies = v.id
            WHERE 
                TO_DATE(de.validity, 'DD-MM-YYYY') >= CURRENT_DATE
                AND TO_DATE(de.validity, 'DD-MM-YYYY') < DATE_TRUNC('month', CURRENT_DATE) + INTERVAL '1 month'
                AND profile.email = destinatario
        ) AS documentos;

        -- Construir el contenido del correo electr√≥nico con el HTML proporcionado
        contenido := '
            <!DOCTYPE html PUBLIC >
            <html lang="es">
            <head>
                <meta content="text/html; charset=UTF-8"/>
            </head>
            <body style="background-color:#f3f3f5;font-family:HelveticaNeue,Helvetica,Arial,sans-serif">
                <h2>Documentos por vencer en los pr√≥ximos 45 d√≠as</h2>
                <ul>' || array_to_string(documentos_usuario, '\n') || '</ul>
            </body>
            </html>';

        -- Construir el asunto del correo electr√≥nico
        asunto := 'Documentos por vencer';

        -- Enviar el correo electr√≥nico al destinatario actual
        PERFORM net.http_post(
            url := 'https://zktcbhhlcksopklpnubj.supabase.co/functions/v1/resend',
            body := jsonb_build_object(
                'from', 'Codecontrol <team@codecontrol.com.ar>',
                'to', jsonb_build_array(destinatario),
                'subject', asunto,
                'html', contenido
            )
        );
    END LOOP;
END;
 $function$
;

CREATE OR REPLACE FUNCTION public.enviar_documentos_a_46_dias()
 RETURNS void
 LANGUAGE plpgsql
AS $function$DECLARE
    destinatario TEXT;
    asunto TEXT;
    contenido TEXT;
    documentos_usuario TEXT[];
    documento RECORD;
BEGIN
    -- Obtener todos los destinatarios √∫nicos
    FOR destinatario IN SELECT DISTINCT profile.email FROM profile
    LOOP
        -- Inicializar el contenido del correo electr√≥nico para el destinatario actual
        contenido := '';

        -- Obtener todos los documentos para el destinatario actual
        SELECT 
            array_agg(
                E'<br>Tipo de documento: ' || tipo_documento ||
                '<br>Fecha de vencimiento: ' || fecha_vencimiento ||
                CASE WHEN documento_empleado IS NOT NULL THEN '<br>Documento del empleado: ' || documento_empleado ELSE '' END ||
                CASE WHEN dominio_vehiculo IS NOT NULL THEN '<br>Dominio del veh√≠culo: ' || dominio_vehiculo ELSE '' END
            )
        INTO documentos_usuario
        FROM (
            SELECT 
                dt.name AS tipo_documento, 
                TO_DATE(de.validity, 'DD-MM-YYYY') AS fecha_vencimiento,
                e.document_number AS documento_empleado,
                v.domain AS dominio_vehiculo
            FROM 
                documents_employees de
            JOIN 
                profile ON de.user_id = profile.id
            JOIN 
                document_types dt ON de.id_document_types = dt.id
            LEFT JOIN
                employees e ON de.applies = e.id
            LEFT JOIN
                vehicles v ON de.applies = v.id
            WHERE 
                TO_DATE(de.validity, 'DD-MM-YYYY') >= CURRENT_DATE
                AND TO_DATE(de.validity, 'DD-MM-YYYY') < DATE_TRUNC('day', CURRENT_DATE) + INTERVAL '45 days'
                AND profile.email = destinatario
            UNION ALL
            SELECT 
                dt.name AS tipo_documento, 
                TO_DATE(de.validity, 'DD-MM-YYYY') AS fecha_vencimiento,
                NULL AS documento_empleado,
                v.domain AS dominio_vehiculo
            FROM 
                documents_equipment de
            JOIN 
                profile ON de.user_id = profile.id
            JOIN 
                document_types dt ON de.id_document_types = dt.id
            LEFT JOIN
                vehicles v ON de.applies = v.id
            WHERE 
                TO_DATE(de.validity, 'DD-MM-YYYY') >= CURRENT_DATE
                AND TO_DATE(de.validity, 'DD-MM-YYYY') < DATE_TRUNC('day', CURRENT_DATE) + INTERVAL '45 days'
                AND profile.email = destinatario
        ) AS documentos;

        -- Construir el contenido del correo electr√≥nico con el HTML proporcionado
        contenido := '
            <!DOCTYPE html PUBLIC >
            <html lang="es">
            <head>
                <meta content="text/html; charset=UTF-8"/>
            </head>
            <body style="background-color:#f3f3f5;font-family:HelveticaNeue,Helvetica,Arial,sans-serif">
                <table align="center" width="100%" border="0" cellPadding="0" cellSpacing="0" role="presentation" style="max-width:100%;width:680px;margin:0 auto;background-color:#ffffff">
                    <tbody>
                        <tr style="width:100%">
                            <td>
                                <table align="center" width="100%" border="0" cellPadding="0" cellSpacing="0" role="presentation" style="border-radius:0px 0px 0 0;display:flex;flex-direciont:column;background-color:#2b2d6e">
                                    <tbody>
                                        <tr>
                                            <td>
                                                <table align="center" width="100%" border="0" cellPadding="0" cellSpacing="0" role="presentation">
                                                    <tbody style="width:100%">
                                                        <tr style="width:100%">
                                                            <td style="padding:20px 30px 15px">
                                                                <h1 style="color:#fff;font-size:27px;font-weight:bold;line-height:27px">Codecontrol.com.ar</h1>
                                                                <p style="font-size:17px;line-height:24px;margin:16px 0;color:#fff">Documentos a Vencer en los pr√≥ximos 45 d√≠as</p>
                                                            </td>
                                                            <td  style="padding:30px 10px"><img src="https://zktcbhhlcksopklpnubj.supabase.co/storage/v1/object/public/logo/Logo%20Juegos%20gaming%20moderno%20azul%20y%20violeta%20(4).png" style="display:block;outline:none;border:none;text-decoration:none;max-width:100%" width="140" /></td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                                <table align="center" width="100%" border="0" cellPadding="0" cellSpacing="0" role="presentation" style="padding:30px 30px 40px 30px">
                                    <tbody>
                                        <tr>
                                            <td>
                                                <h2 style="margin:0 0 15px;font-weight:bold;font-size:21px;line-height:21px;color:#0c0d0e">Listado de Documentos</h2>
                                                
                                                <hr style="width:100%;border:none;border-top:1px solid #eaeaea;margin:30px 0" />
                                                
                                                <ul>' || array_to_string(documentos_usuario,'<br>') || '</ul>
                                                
                                                <hr style="width:100%;border:none;border-top:1px solid #eaeaea;margin:30px 0" />
                                                <h2 style="margin:0 0 15px;font-weight:bold;font-size:21px;line-height:21px;color:#0c0d0e">Para ver los documentos dir√≠jase a la app</h2>
                                                <table align="center" width="100%" border="0" cellPadding="0" cellSpacing="0" role="presentation" style="margin-top:24px;display:block">
                                                    <tbody>
                                                        <tr>
                                                            <td><a href="https://codecontrol.com.ar" style="color:#fff;text-decoration:none;background-color:#0095ff;border:1px solid #0077cc;font-size:17px;line-height:17px;padding:13px 17px;border-radius:4px;max-width:120px" target="_blank">ir a codecontrol.com.ar</a></td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </body>
            </html>';

        -- Construir el asunto del correo electr√≥nico
        asunto := 'Documentos por vencer';

        -- Enviar el correo electr√≥nico al destinatario actual
        PERFORM net.http_post(
            url := 'https://zktcbhhlcksopklpnubj.supabase.co/functions/v1/resend',
            body := jsonb_build_object(
                'from', 'Codecontrol <team@codecontrol.com.ar>',
                'to', jsonb_build_array(destinatario),
                'subject', asunto,
                'html', contenido
            )
        );
    END LOOP;
END;$function$
;

CREATE OR REPLACE FUNCTION public.enviar_documentos_por_vencer()
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
  documento RECORD;
  documentos_por_usuario JSONB; /* Initialize as an empty JSON object */
  email_body TEXT;
  destinatario TEXT;
  request_body TEXT;

BEGIN
  /* Fetch documents within 45 days from now */
  FOR documento IN
    SELECT
      de.user_id,
      dt.name AS tipo_documento,
      date_part('day', TO_DATE(de.validity, 'DD-MM-YYYY')) AS fecha_vencimiento_dia,
      COALESCE(e.document_number, NULL) AS documento_empleado,
      v.domain AS dominio_vehiculo
    FROM
      documents_employees de
      JOIN profile ON de.user_id = profile.id
      JOIN document_types dt ON de.id_document_types = dt.id
      LEFT JOIN employees e ON de.applies = e.id
      LEFT JOIN vehicles v ON de.applies = v.id
    WHERE
      date_part('day', TO_DATE(de.validity, 'DD-MM-YYYY')) >= date_part('day', CURRENT_DATE) AND
      date_part('day', TO_DATE(de.validity, 'DD-MM-YYYY')) < date_part('day', CURRENT_DATE + INTERVAL '45 days')
    UNION ALL
    SELECT
      de.user_id,
      dt.name AS tipo_documento,
      date_part('day', TO_DATE(de.validity, 'DD-MM-YYYY')) AS fecha_vencimiento_dia,
      NULL AS documento_empleado,
      v.domain AS dominio_vehiculo
    FROM
      documents_equipment de
      JOIN profile ON de.user_id = profile.id
      JOIN document_types dt ON de.id_document_types = dt.id
      LEFT JOIN vehicles v ON de.applies = v.id
    WHERE
      date_part('day', TO_DATE(de.validity, 'DD-MM-YYYY')) >= date_part('day', CURRENT_DATE) AND
      date_part('day', TO_DATE(de.validity, 'DD-MM-YYYY')) < date_part('day', CURRENT_DATE + INTERVAL '45 days') LOOP

    /*
     Since we're fetching documents per user in a single query
     using UNION ALL, we don't need a nested loop here.
     Instead, directly process each fetched document.
    */
    IF documentos_por_usuario[documento.user_id::text] IS NULL THEN
      documentos_por_usuario[documento.user_id::text] := JSONB '[]';
    END IF;

    documentos_por_usuario[documento.user_id::text] := jsonb_build_object(
      'tipo_documento', documento.tipo_documento,
      'fecha_vencimiento', TO_DATE(fecha_vencimiento_dia, 'DD'),
      'documento_empleado', documento.documento_empleado,
      'dominio_vehiculo', documento.dominio_vehiculo
    );
  END LOOP;

  /*
   Send emails to distinct users, iterating through
   the collected user email addresses.
  */
  FOR destinatario IN SELECT DISTINCT profile.email FROM profile
  LOOP
    email_body = documentos_por_usuario[destinatario]::text;

    IF email_body IS NOT NULL THEN
      request_body = '{"to": "' || destinatario || '", "subject": "Documentos por vencer", "body": "' || email_body || '"}';
      PERFORM http_post('https://zktcbhhlcksopklpnubj.supabase.co/functions/v1/resend', request_body);
    END IF;
  END LOOP;

  RETURN;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.enviar_documentos_vencidos()
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
    destinatario TEXT;
    asunto TEXT;
    contenido TEXT;
    documentos_usuario TEXT[];
    documento RECORD;
BEGIN
    -- Obtener todos los destinatarios √∫nicos
    FOR destinatario IN SELECT DISTINCT profile.email FROM profile
    LOOP
        -- Inicializar el contenido del correo electr√≥nico para el destinatario actual
        contenido := '';

        -- Obtener todos los documentos para el destinatario actual
        SELECT 
            array_agg(
                E'<br>Tipo de documento: ' || tipo_documento ||
                '<br>Fecha de vencimiento: ' || fecha_vencimiento ||
                CASE WHEN documento_empleado IS NOT NULL THEN '<br>Documento del empleado: ' || documento_empleado ELSE '' END ||
                CASE WHEN dominio_vehiculo IS NOT NULL THEN '<br>Dominio del veh√≠culo: ' || dominio_vehiculo ELSE '' END
            )
        INTO documentos_usuario
        FROM (
            SELECT 
                dt.name AS tipo_documento, 
                TO_DATE(de.validity, 'DD-MM-YYYY') AS fecha_vencimiento,
                e.document_number AS documento_empleado,
                v.domain AS dominio_vehiculo
            FROM 
                documents_employees de
            JOIN 
                profile ON de.user_id = profile.id
            JOIN 
                document_types dt ON de.id_document_types = dt.id
            LEFT JOIN
                employees e ON de.applies = e.id
            LEFT JOIN
                vehicles v ON de.applies = v.id
            WHERE 
                TO_DATE(de.validity, 'DD-MM-YYYY') >= CURRENT_DATE
                AND TO_DATE(de.validity, 'DD-MM-YYYY') = DATE_TRUNC('day', CURRENT_DATE)
                AND profile.email = destinatario
            UNION ALL
            SELECT 
                dt.name AS tipo_documento, 
                TO_DATE(de.validity, 'DD-MM-YYYY') AS fecha_vencimiento,
                NULL AS documento_empleado,
                v.domain AS dominio_vehiculo
            FROM 
                documents_equipment de
            JOIN 
                profile ON de.user_id = profile.id
            JOIN 
                document_types dt ON de.id_document_types = dt.id
            LEFT JOIN
                vehicles v ON de.applies = v.id
            WHERE 
                TO_DATE(de.validity, 'DD-MM-YYYY') >= CURRENT_DATE
                AND TO_DATE(de.validity, 'DD-MM-YYYY') = DATE_TRUNC('day', CURRENT_DATE)
                AND profile.email = destinatario
        ) AS documentos;

        -- Construir el contenido del correo electr√≥nico con el HTML proporcionado
        contenido := '
            <!DOCTYPE html PUBLIC >
            <html lang="es">
            <head>
                <meta content="text/html; charset=UTF-8"/>
            </head>
            <body style="background-color:#f3f3f5;font-family:HelveticaNeue,Helvetica,Arial,sans-serif">
                <table align="center" width="100%" border="0" cellPadding="0" cellSpacing="0" role="presentation" style="max-width:100%;width:680px;margin:0 auto;background-color:#ffffff">
                    <tbody>
                        <tr style="width:100%">
                            <td>
                                <table align="center" width="100%" border="0" cellPadding="0" cellSpacing="0" role="presentation" style="border-radius:0px 0px 0 0;display:flex;flex-direciont:column;background-color:#2b2d6e">
                                    <tbody>
                                        <tr>
                                            <td>
                                                <table align="center" width="100%" border="0" cellPadding="0" cellSpacing="0" role="presentation">
                                                    <tbody style="width:100%">
                                                        <tr style="width:100%">
                                                            <td style="padding:20px 30px 15px">
                                                                <h1 style="color:#fff;font-size:27px;font-weight:bold;line-height:27px">Codecontrol.com.ar</h1>
                                                                <p style="font-size:17px;line-height:24px;margin:16px 0;color:#fff">Documentos Vencidos</p>
                                                            </td>
                                                            <td  style="padding:30px 10px"><img src="https://zktcbhhlcksopklpnubj.supabase.co/storage/v1/object/public/logo/Logo%20Juegos%20gaming%20moderno%20azul%20y%20violeta%20(4).png" style="display:block;outline:none;border:none;text-decoration:none;max-width:100%" width="140" /></td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                                <table align="center" width="100%" border="0" cellPadding="0" cellSpacing="0" role="presentation" style="padding:30px 30px 40px 30px">
                                    <tbody>
                                        <tr>
                                            <td>
                                                <h2 style="margin:0 0 15px;font-weight:bold;font-size:21px;line-height:21px;color:#0c0d0e">Listado de Documentos</h2>
                                                
                                                <hr style="width:100%;border:none;border-top:1px solid #eaeaea;margin:30px 0" />
                                                
                                                <ul>' || array_to_string(documentos_usuario, '<br>') || '</ul>
                                                
                                                <hr style="width:100%;border:none;border-top:1px solid #eaeaea;margin:30px 0" />
                                                <h2 style="margin:0 0 15px;font-weight:bold;font-size:21px;line-height:21px;color:#0c0d0e">Para ver los documentos dir√≠jase a la app</h2>
                                                <table align="center" width="100%" border="0" cellPadding="0" cellSpacing="0" role="presentation" style="margin-top:24px;display:block">
                                                    <tbody>
                                                        <tr>
                                                            <td><a href="https://codecontrol.com.ar" style="color:#fff;text-decoration:none;background-color:#0095ff;border:1px solid #0077cc;font-size:17px;line-height:17px;padding:13px 17px;border-radius:4px;max-width:120px" target="_blank">ir a codecontrol.com.ar</a></td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </body>
            </html>';

        -- Construir el asunto del correo electr√≥nico
        asunto := 'Documentos vencidos';

        -- Enviar el correo electr√≥nico al destinatario actual
        PERFORM net.http_post(
            url := 'https://zktcbhhlcksopklpnubj.supabase.co/functions/v1/resend',
            body := jsonb_build_object(
                'from', 'Codecontrol <team@codecontrol.com.ar>',
                'to', jsonb_build_array(destinatario),
                'subject', asunto,
                'html', contenido
            )
        );
    END LOOP;
END;
 $function$
;

CREATE OR REPLACE FUNCTION public.log_document_employee_changes()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
    IF TG_OP = 'INSERT' THEN
        INSERT INTO documents_employees_logs (documents_employees_id, modified_by, updated_at)
        VALUES (NEW.id, NEW.user_id, now());
    ELSIF TG_OP = 'UPDATE' THEN
        INSERT INTO documents_employees_logs (documents_employees_id, modified_by, updated_at)
        VALUES (NEW.id, NEW.user_id, now());
    END IF;
    RETURN NULL;
END;$function$
;

CREATE OR REPLACE FUNCTION public.log_document_equipment_changes()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
    IF TG_OP = 'INSERT' THEN
        INSERT INTO documents_equipment_logs (documents_equipment_id, modified_by, updated_at)
        VALUES (NEW.id, NEW.user_id, now());
    ELSIF TG_OP = 'UPDATE' THEN
        INSERT INTO documents_equipment_logs (documents_equipment_id, modified_by, updated_at)
        VALUES (NEW.id, NEW.user_id, now());
    END IF;
    RETURN NULL;
END;$function$
;

CREATE OR REPLACE FUNCTION public.notify_document_update()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
DECLARE
    v_company_id UUID; -- Variable para almacenar el company_id
    resource text;
BEGIN
    -- Obtener el company_id basado en el ID proporcionado
    select 
  company_id INTO v_company_id
from
  documents_employees
  inner join employees on documents_employees.applies = employees.id
where
  documents_employees.id = NEW.id;
   resource :='employee';

    IF v_company_id IS NULL THEN
            -- Si no se encontr√≥ en documents_employees, buscar en documents_equipment
            SELECT company_id INTO v_company_id
            FROM documents_equipment  inner join vehicles on documents_equipment.applies = documents_equipment.id
            WHERE documents_equipment.id = NEW.id;
            resource :='equipment';
        END IF;

    IF NEW.state = 'rechazado' THEN
        INSERT INTO notifications (title, description, category, company_id, document_id,reference)
        VALUES ('Un documento ha sido rechazado', NEW.deny_reason, 'rechazado', v_company_id, NEW.id,resource);
    ELSIF NEW.state = 'aprobado' THEN
        INSERT INTO notifications (title, description, category, company_id, document_id,reference)
        VALUES ('Un documento ha sido aprobado', '', 'aprobado', v_company_id, NEW.id,resource);
    ELSIF NEW.state = 'vencido' THEN
        INSERT INTO notifications (title, description, category, company_id, document_id,reference)
        VALUES ('Venci√≥ un documento', '', 'vencimiento', v_company_id, NEW.id,resource);
    END IF;

    RETURN NEW;
END;

$function$
;

CREATE OR REPLACE FUNCTION public.obtener_documentos_por_vencer()
 RETURNS TABLE(tipo_documento text, correo_electronico text, fecha_vencimiento date, documento_empleado text, dominio_vehiculo text)
 LANGUAGE plpgsql
AS $function$BEGIN
    RETURN QUERY (
        SELECT 
            dt.name AS tipo_documento, 
            profile.email AS correo_electronico, 
            TO_DATE(de.validity, 'DD-MM-YYYY') AS fecha_vencimiento,
            e.document_number AS documento_empleado,
            NULL AS dominio_vehiculo
        FROM 
            documents_employees de
        JOIN 
            profile ON de.user_id = profile.id
        JOIN 
            document_types dt ON de.id_document_types = dt.id
        JOIN
            employees e ON de.applies = e.id
        WHERE 
            TO_DATE(de.validity, 'DD-MM-YYYY') >= CURRENT_DATE
            AND TO_DATE(de.validity, 'DD-MM-YYYY') < DATE_TRUNC('month', CURRENT_DATE) + INTERVAL '45 days'
        UNION ALL
        SELECT 
            dt.name AS tipo_documento, 
            profile.email AS correo_electronico, 
            TO_DATE(de.validity, 'DD-MM-YYYY') AS fecha_vencimiento,
            NULL AS documento_empleado,
            v.domain AS dominio_vehiculo
        FROM 
            documents_equipment de
        JOIN 
            profile ON de.user_id = profile.id
        JOIN 
            document_types dt ON de.id_document_types = dt.id
        LEFT JOIN
            vehicles v ON de.applies = v.id
        WHERE 
            TO_DATE(de.validity, 'DD-MM-YYYY') >= CURRENT_DATE
            AND TO_DATE(de.validity, 'DD-MM-YYYY') < DATE_TRUNC('month', CURRENT_DATE) + INTERVAL '1 month'
    );
END;$function$
;

CREATE OR REPLACE FUNCTION public.update_company_by_defect()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
    IF NEW.by_defect = true THEN
        UPDATE company
        SET by_defect = false
        WHERE owner_id = NEW.owner_id AND id <> NEW.id;
    END IF;
    RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.verificar_documentos_vencidos_prueba()
 RETURNS void
 LANGUAGE plpgsql
AS $function$DECLARE
    v_company_id uuid;
    resource text;
BEGIN
    -- Establecer el estilo de fecha
    SET datestyle = 'ISO, DMY';

    -- Verificar documentos vencidos en documents_employees
    UPDATE documents_employees
    SET state = 'vencido'
    WHERE validity::date < current_date;

    -- Verificar documentos vencidos en documents_equipment
    UPDATE documents_equipment
    SET state = 'vencido'
    WHERE validity::date < current_date;

    -- Buscar company_id en documents_employees
    SELECT company_id INTO v_company_id
    FROM documents_employees
    WHERE documents_employees.id = NEW.id;

    -- Si no se encontr√≥ en documents_employees, buscar en documents_equipment
    IF v_company_id IS NULL THEN
        SELECT company_id INTO v_company_id
        FROM documents_equipment
        WHERE documents_equipment.id = NEW.id;
        resource := 'equipment';
    ELSE
        resource := 'employee';
    END IF;

    -- Insertar entrada en la tabla notifications si se cambi√≥ el estado
    IF FOUND THEN
        INSERT INTO notifications (
            title,
            description,
            category,
            company_id,
            document_id,
            reference
        )
        VALUES (
            'Venci√≥ un documento',
            '',
            'vencimiento',
            v_company_id,
            NEW.id,
            resource
        );
    END IF;
END;$function$
;

grant delete on table "public"."brand_vehicles" to "anon";

grant insert on table "public"."brand_vehicles" to "anon";

grant references on table "public"."brand_vehicles" to "anon";

grant select on table "public"."brand_vehicles" to "anon";

grant trigger on table "public"."brand_vehicles" to "anon";

grant truncate on table "public"."brand_vehicles" to "anon";

grant update on table "public"."brand_vehicles" to "anon";

grant delete on table "public"."brand_vehicles" to "authenticated";

grant insert on table "public"."brand_vehicles" to "authenticated";

grant references on table "public"."brand_vehicles" to "authenticated";

grant select on table "public"."brand_vehicles" to "authenticated";

grant trigger on table "public"."brand_vehicles" to "authenticated";

grant truncate on table "public"."brand_vehicles" to "authenticated";

grant update on table "public"."brand_vehicles" to "authenticated";

grant delete on table "public"."brand_vehicles" to "service_role";

grant insert on table "public"."brand_vehicles" to "service_role";

grant references on table "public"."brand_vehicles" to "service_role";

grant select on table "public"."brand_vehicles" to "service_role";

grant trigger on table "public"."brand_vehicles" to "service_role";

grant truncate on table "public"."brand_vehicles" to "service_role";

grant update on table "public"."brand_vehicles" to "service_role";

grant delete on table "public"."cities" to "anon";

grant insert on table "public"."cities" to "anon";

grant references on table "public"."cities" to "anon";

grant select on table "public"."cities" to "anon";

grant trigger on table "public"."cities" to "anon";

grant truncate on table "public"."cities" to "anon";

grant update on table "public"."cities" to "anon";

grant delete on table "public"."cities" to "authenticated";

grant insert on table "public"."cities" to "authenticated";

grant references on table "public"."cities" to "authenticated";

grant select on table "public"."cities" to "authenticated";

grant trigger on table "public"."cities" to "authenticated";

grant truncate on table "public"."cities" to "authenticated";

grant update on table "public"."cities" to "authenticated";

grant delete on table "public"."cities" to "service_role";

grant insert on table "public"."cities" to "service_role";

grant references on table "public"."cities" to "service_role";

grant select on table "public"."cities" to "service_role";

grant trigger on table "public"."cities" to "service_role";

grant truncate on table "public"."cities" to "service_role";

grant update on table "public"."cities" to "service_role";

grant delete on table "public"."companies_employees" to "anon";

grant insert on table "public"."companies_employees" to "anon";

grant references on table "public"."companies_employees" to "anon";

grant select on table "public"."companies_employees" to "anon";

grant trigger on table "public"."companies_employees" to "anon";

grant truncate on table "public"."companies_employees" to "anon";

grant update on table "public"."companies_employees" to "anon";

grant delete on table "public"."companies_employees" to "authenticated";

grant insert on table "public"."companies_employees" to "authenticated";

grant references on table "public"."companies_employees" to "authenticated";

grant select on table "public"."companies_employees" to "authenticated";

grant trigger on table "public"."companies_employees" to "authenticated";

grant truncate on table "public"."companies_employees" to "authenticated";

grant update on table "public"."companies_employees" to "authenticated";

grant delete on table "public"."companies_employees" to "service_role";

grant insert on table "public"."companies_employees" to "service_role";

grant references on table "public"."companies_employees" to "service_role";

grant select on table "public"."companies_employees" to "service_role";

grant trigger on table "public"."companies_employees" to "service_role";

grant truncate on table "public"."companies_employees" to "service_role";

grant update on table "public"."companies_employees" to "service_role";

grant delete on table "public"."company" to "anon";

grant insert on table "public"."company" to "anon";

grant references on table "public"."company" to "anon";

grant select on table "public"."company" to "anon";

grant trigger on table "public"."company" to "anon";

grant truncate on table "public"."company" to "anon";

grant update on table "public"."company" to "anon";

grant delete on table "public"."company" to "authenticated";

grant insert on table "public"."company" to "authenticated";

grant references on table "public"."company" to "authenticated";

grant select on table "public"."company" to "authenticated";

grant trigger on table "public"."company" to "authenticated";

grant truncate on table "public"."company" to "authenticated";

grant update on table "public"."company" to "authenticated";

grant delete on table "public"."company" to "service_role";

grant insert on table "public"."company" to "service_role";

grant references on table "public"."company" to "service_role";

grant select on table "public"."company" to "service_role";

grant trigger on table "public"."company" to "service_role";

grant truncate on table "public"."company" to "service_role";

grant update on table "public"."company" to "service_role";

grant delete on table "public"."contractor_employee" to "anon";

grant insert on table "public"."contractor_employee" to "anon";

grant references on table "public"."contractor_employee" to "anon";

grant select on table "public"."contractor_employee" to "anon";

grant trigger on table "public"."contractor_employee" to "anon";

grant truncate on table "public"."contractor_employee" to "anon";

grant update on table "public"."contractor_employee" to "anon";

grant delete on table "public"."contractor_employee" to "authenticated";

grant insert on table "public"."contractor_employee" to "authenticated";

grant references on table "public"."contractor_employee" to "authenticated";

grant select on table "public"."contractor_employee" to "authenticated";

grant trigger on table "public"."contractor_employee" to "authenticated";

grant truncate on table "public"."contractor_employee" to "authenticated";

grant update on table "public"."contractor_employee" to "authenticated";

grant delete on table "public"."contractor_employee" to "service_role";

grant insert on table "public"."contractor_employee" to "service_role";

grant references on table "public"."contractor_employee" to "service_role";

grant select on table "public"."contractor_employee" to "service_role";

grant trigger on table "public"."contractor_employee" to "service_role";

grant truncate on table "public"."contractor_employee" to "service_role";

grant update on table "public"."contractor_employee" to "service_role";

grant delete on table "public"."contractors" to "anon";

grant insert on table "public"."contractors" to "anon";

grant references on table "public"."contractors" to "anon";

grant select on table "public"."contractors" to "anon";

grant trigger on table "public"."contractors" to "anon";

grant truncate on table "public"."contractors" to "anon";

grant update on table "public"."contractors" to "anon";

grant delete on table "public"."contractors" to "authenticated";

grant insert on table "public"."contractors" to "authenticated";

grant references on table "public"."contractors" to "authenticated";

grant select on table "public"."contractors" to "authenticated";

grant trigger on table "public"."contractors" to "authenticated";

grant truncate on table "public"."contractors" to "authenticated";

grant update on table "public"."contractors" to "authenticated";

grant delete on table "public"."contractors" to "service_role";

grant insert on table "public"."contractors" to "service_role";

grant references on table "public"."contractors" to "service_role";

grant select on table "public"."contractors" to "service_role";

grant trigger on table "public"."contractors" to "service_role";

grant truncate on table "public"."contractors" to "service_role";

grant update on table "public"."contractors" to "service_role";

grant delete on table "public"."countries" to "anon";

grant insert on table "public"."countries" to "anon";

grant references on table "public"."countries" to "anon";

grant select on table "public"."countries" to "anon";

grant trigger on table "public"."countries" to "anon";

grant truncate on table "public"."countries" to "anon";

grant update on table "public"."countries" to "anon";

grant delete on table "public"."countries" to "authenticated";

grant insert on table "public"."countries" to "authenticated";

grant references on table "public"."countries" to "authenticated";

grant select on table "public"."countries" to "authenticated";

grant trigger on table "public"."countries" to "authenticated";

grant truncate on table "public"."countries" to "authenticated";

grant update on table "public"."countries" to "authenticated";

grant delete on table "public"."countries" to "service_role";

grant insert on table "public"."countries" to "service_role";

grant references on table "public"."countries" to "service_role";

grant select on table "public"."countries" to "service_role";

grant trigger on table "public"."countries" to "service_role";

grant truncate on table "public"."countries" to "service_role";

grant update on table "public"."countries" to "service_role";

grant delete on table "public"."document_types" to "anon";

grant insert on table "public"."document_types" to "anon";

grant references on table "public"."document_types" to "anon";

grant select on table "public"."document_types" to "anon";

grant trigger on table "public"."document_types" to "anon";

grant truncate on table "public"."document_types" to "anon";

grant update on table "public"."document_types" to "anon";

grant delete on table "public"."document_types" to "authenticated";

grant insert on table "public"."document_types" to "authenticated";

grant references on table "public"."document_types" to "authenticated";

grant select on table "public"."document_types" to "authenticated";

grant trigger on table "public"."document_types" to "authenticated";

grant truncate on table "public"."document_types" to "authenticated";

grant update on table "public"."document_types" to "authenticated";

grant delete on table "public"."document_types" to "service_role";

grant insert on table "public"."document_types" to "service_role";

grant references on table "public"."document_types" to "service_role";

grant select on table "public"."document_types" to "service_role";

grant trigger on table "public"."document_types" to "service_role";

grant truncate on table "public"."document_types" to "service_role";

grant update on table "public"."document_types" to "service_role";

grant delete on table "public"."documents_employees" to "anon";

grant insert on table "public"."documents_employees" to "anon";

grant references on table "public"."documents_employees" to "anon";

grant select on table "public"."documents_employees" to "anon";

grant trigger on table "public"."documents_employees" to "anon";

grant truncate on table "public"."documents_employees" to "anon";

grant update on table "public"."documents_employees" to "anon";

grant delete on table "public"."documents_employees" to "authenticated";

grant insert on table "public"."documents_employees" to "authenticated";

grant references on table "public"."documents_employees" to "authenticated";

grant select on table "public"."documents_employees" to "authenticated";

grant trigger on table "public"."documents_employees" to "authenticated";

grant truncate on table "public"."documents_employees" to "authenticated";

grant update on table "public"."documents_employees" to "authenticated";

grant delete on table "public"."documents_employees" to "service_role";

grant insert on table "public"."documents_employees" to "service_role";

grant references on table "public"."documents_employees" to "service_role";

grant select on table "public"."documents_employees" to "service_role";

grant trigger on table "public"."documents_employees" to "service_role";

grant truncate on table "public"."documents_employees" to "service_role";

grant update on table "public"."documents_employees" to "service_role";

grant delete on table "public"."documents_employees_logs" to "anon";

grant insert on table "public"."documents_employees_logs" to "anon";

grant references on table "public"."documents_employees_logs" to "anon";

grant select on table "public"."documents_employees_logs" to "anon";

grant trigger on table "public"."documents_employees_logs" to "anon";

grant truncate on table "public"."documents_employees_logs" to "anon";

grant update on table "public"."documents_employees_logs" to "anon";

grant delete on table "public"."documents_employees_logs" to "authenticated";

grant insert on table "public"."documents_employees_logs" to "authenticated";

grant references on table "public"."documents_employees_logs" to "authenticated";

grant select on table "public"."documents_employees_logs" to "authenticated";

grant trigger on table "public"."documents_employees_logs" to "authenticated";

grant truncate on table "public"."documents_employees_logs" to "authenticated";

grant update on table "public"."documents_employees_logs" to "authenticated";

grant delete on table "public"."documents_employees_logs" to "service_role";

grant insert on table "public"."documents_employees_logs" to "service_role";

grant references on table "public"."documents_employees_logs" to "service_role";

grant select on table "public"."documents_employees_logs" to "service_role";

grant trigger on table "public"."documents_employees_logs" to "service_role";

grant truncate on table "public"."documents_employees_logs" to "service_role";

grant update on table "public"."documents_employees_logs" to "service_role";

grant delete on table "public"."documents_equipment" to "anon";

grant insert on table "public"."documents_equipment" to "anon";

grant references on table "public"."documents_equipment" to "anon";

grant select on table "public"."documents_equipment" to "anon";

grant trigger on table "public"."documents_equipment" to "anon";

grant truncate on table "public"."documents_equipment" to "anon";

grant update on table "public"."documents_equipment" to "anon";

grant delete on table "public"."documents_equipment" to "authenticated";

grant insert on table "public"."documents_equipment" to "authenticated";

grant references on table "public"."documents_equipment" to "authenticated";

grant select on table "public"."documents_equipment" to "authenticated";

grant trigger on table "public"."documents_equipment" to "authenticated";

grant truncate on table "public"."documents_equipment" to "authenticated";

grant update on table "public"."documents_equipment" to "authenticated";

grant delete on table "public"."documents_equipment" to "service_role";

grant insert on table "public"."documents_equipment" to "service_role";

grant references on table "public"."documents_equipment" to "service_role";

grant select on table "public"."documents_equipment" to "service_role";

grant trigger on table "public"."documents_equipment" to "service_role";

grant truncate on table "public"."documents_equipment" to "service_role";

grant update on table "public"."documents_equipment" to "service_role";

grant delete on table "public"."documents_equipment_logs" to "anon";

grant insert on table "public"."documents_equipment_logs" to "anon";

grant references on table "public"."documents_equipment_logs" to "anon";

grant select on table "public"."documents_equipment_logs" to "anon";

grant trigger on table "public"."documents_equipment_logs" to "anon";

grant truncate on table "public"."documents_equipment_logs" to "anon";

grant update on table "public"."documents_equipment_logs" to "anon";

grant delete on table "public"."documents_equipment_logs" to "authenticated";

grant insert on table "public"."documents_equipment_logs" to "authenticated";

grant references on table "public"."documents_equipment_logs" to "authenticated";

grant select on table "public"."documents_equipment_logs" to "authenticated";

grant trigger on table "public"."documents_equipment_logs" to "authenticated";

grant truncate on table "public"."documents_equipment_logs" to "authenticated";

grant update on table "public"."documents_equipment_logs" to "authenticated";

grant delete on table "public"."documents_equipment_logs" to "service_role";

grant insert on table "public"."documents_equipment_logs" to "service_role";

grant references on table "public"."documents_equipment_logs" to "service_role";

grant select on table "public"."documents_equipment_logs" to "service_role";

grant trigger on table "public"."documents_equipment_logs" to "service_role";

grant truncate on table "public"."documents_equipment_logs" to "service_role";

grant update on table "public"."documents_equipment_logs" to "service_role";

grant delete on table "public"."employees" to "anon";

grant insert on table "public"."employees" to "anon";

grant references on table "public"."employees" to "anon";

grant select on table "public"."employees" to "anon";

grant trigger on table "public"."employees" to "anon";

grant truncate on table "public"."employees" to "anon";

grant update on table "public"."employees" to "anon";

grant delete on table "public"."employees" to "authenticated";

grant insert on table "public"."employees" to "authenticated";

grant references on table "public"."employees" to "authenticated";

grant select on table "public"."employees" to "authenticated";

grant trigger on table "public"."employees" to "authenticated";

grant truncate on table "public"."employees" to "authenticated";

grant update on table "public"."employees" to "authenticated";

grant delete on table "public"."employees" to "service_role";

grant insert on table "public"."employees" to "service_role";

grant references on table "public"."employees" to "service_role";

grant select on table "public"."employees" to "service_role";

grant trigger on table "public"."employees" to "service_role";

grant truncate on table "public"."employees" to "service_role";

grant update on table "public"."employees" to "service_role";

grant delete on table "public"."hierarchy" to "anon";

grant insert on table "public"."hierarchy" to "anon";

grant references on table "public"."hierarchy" to "anon";

grant select on table "public"."hierarchy" to "anon";

grant trigger on table "public"."hierarchy" to "anon";

grant truncate on table "public"."hierarchy" to "anon";

grant update on table "public"."hierarchy" to "anon";

grant delete on table "public"."hierarchy" to "authenticated";

grant insert on table "public"."hierarchy" to "authenticated";

grant references on table "public"."hierarchy" to "authenticated";

grant select on table "public"."hierarchy" to "authenticated";

grant trigger on table "public"."hierarchy" to "authenticated";

grant truncate on table "public"."hierarchy" to "authenticated";

grant update on table "public"."hierarchy" to "authenticated";

grant delete on table "public"."hierarchy" to "service_role";

grant insert on table "public"."hierarchy" to "service_role";

grant references on table "public"."hierarchy" to "service_role";

grant select on table "public"."hierarchy" to "service_role";

grant trigger on table "public"."hierarchy" to "service_role";

grant truncate on table "public"."hierarchy" to "service_role";

grant update on table "public"."hierarchy" to "service_role";

grant delete on table "public"."industry_type" to "anon";

grant insert on table "public"."industry_type" to "anon";

grant references on table "public"."industry_type" to "anon";

grant select on table "public"."industry_type" to "anon";

grant trigger on table "public"."industry_type" to "anon";

grant truncate on table "public"."industry_type" to "anon";

grant update on table "public"."industry_type" to "anon";

grant delete on table "public"."industry_type" to "authenticated";

grant insert on table "public"."industry_type" to "authenticated";

grant references on table "public"."industry_type" to "authenticated";

grant select on table "public"."industry_type" to "authenticated";

grant trigger on table "public"."industry_type" to "authenticated";

grant truncate on table "public"."industry_type" to "authenticated";

grant update on table "public"."industry_type" to "authenticated";

grant delete on table "public"."industry_type" to "service_role";

grant insert on table "public"."industry_type" to "service_role";

grant references on table "public"."industry_type" to "service_role";

grant select on table "public"."industry_type" to "service_role";

grant trigger on table "public"."industry_type" to "service_role";

grant truncate on table "public"."industry_type" to "service_role";

grant update on table "public"."industry_type" to "service_role";

grant delete on table "public"."model_vehicles" to "anon";

grant insert on table "public"."model_vehicles" to "anon";

grant references on table "public"."model_vehicles" to "anon";

grant select on table "public"."model_vehicles" to "anon";

grant trigger on table "public"."model_vehicles" to "anon";

grant truncate on table "public"."model_vehicles" to "anon";

grant update on table "public"."model_vehicles" to "anon";

grant delete on table "public"."model_vehicles" to "authenticated";

grant insert on table "public"."model_vehicles" to "authenticated";

grant references on table "public"."model_vehicles" to "authenticated";

grant select on table "public"."model_vehicles" to "authenticated";

grant trigger on table "public"."model_vehicles" to "authenticated";

grant truncate on table "public"."model_vehicles" to "authenticated";

grant update on table "public"."model_vehicles" to "authenticated";

grant delete on table "public"."model_vehicles" to "service_role";

grant insert on table "public"."model_vehicles" to "service_role";

grant references on table "public"."model_vehicles" to "service_role";

grant select on table "public"."model_vehicles" to "service_role";

grant trigger on table "public"."model_vehicles" to "service_role";

grant truncate on table "public"."model_vehicles" to "service_role";

grant update on table "public"."model_vehicles" to "service_role";

grant delete on table "public"."notifications" to "anon";

grant insert on table "public"."notifications" to "anon";

grant references on table "public"."notifications" to "anon";

grant select on table "public"."notifications" to "anon";

grant trigger on table "public"."notifications" to "anon";

grant truncate on table "public"."notifications" to "anon";

grant update on table "public"."notifications" to "anon";

grant delete on table "public"."notifications" to "authenticated";

grant insert on table "public"."notifications" to "authenticated";

grant references on table "public"."notifications" to "authenticated";

grant select on table "public"."notifications" to "authenticated";

grant trigger on table "public"."notifications" to "authenticated";

grant truncate on table "public"."notifications" to "authenticated";

grant update on table "public"."notifications" to "authenticated";

grant delete on table "public"."notifications" to "service_role";

grant insert on table "public"."notifications" to "service_role";

grant references on table "public"."notifications" to "service_role";

grant select on table "public"."notifications" to "service_role";

grant trigger on table "public"."notifications" to "service_role";

grant truncate on table "public"."notifications" to "service_role";

grant update on table "public"."notifications" to "service_role";

grant delete on table "public"."profile" to "anon";

grant insert on table "public"."profile" to "anon";

grant references on table "public"."profile" to "anon";

grant select on table "public"."profile" to "anon";

grant trigger on table "public"."profile" to "anon";

grant truncate on table "public"."profile" to "anon";

grant update on table "public"."profile" to "anon";

grant delete on table "public"."profile" to "authenticated";

grant insert on table "public"."profile" to "authenticated";

grant references on table "public"."profile" to "authenticated";

grant select on table "public"."profile" to "authenticated";

grant trigger on table "public"."profile" to "authenticated";

grant truncate on table "public"."profile" to "authenticated";

grant update on table "public"."profile" to "authenticated";

grant delete on table "public"."profile" to "service_role";

grant insert on table "public"."profile" to "service_role";

grant references on table "public"."profile" to "service_role";

grant select on table "public"."profile" to "service_role";

grant trigger on table "public"."profile" to "service_role";

grant truncate on table "public"."profile" to "service_role";

grant update on table "public"."profile" to "service_role";

grant delete on table "public"."provinces" to "anon";

grant insert on table "public"."provinces" to "anon";

grant references on table "public"."provinces" to "anon";

grant select on table "public"."provinces" to "anon";

grant trigger on table "public"."provinces" to "anon";

grant truncate on table "public"."provinces" to "anon";

grant update on table "public"."provinces" to "anon";

grant delete on table "public"."provinces" to "authenticated";

grant insert on table "public"."provinces" to "authenticated";

grant references on table "public"."provinces" to "authenticated";

grant select on table "public"."provinces" to "authenticated";

grant trigger on table "public"."provinces" to "authenticated";

grant truncate on table "public"."provinces" to "authenticated";

grant update on table "public"."provinces" to "authenticated";

grant delete on table "public"."provinces" to "service_role";

grant insert on table "public"."provinces" to "service_role";

grant references on table "public"."provinces" to "service_role";

grant select on table "public"."provinces" to "service_role";

grant trigger on table "public"."provinces" to "service_role";

grant truncate on table "public"."provinces" to "service_role";

grant update on table "public"."provinces" to "service_role";

grant delete on table "public"."roles" to "anon";

grant insert on table "public"."roles" to "anon";

grant references on table "public"."roles" to "anon";

grant select on table "public"."roles" to "anon";

grant trigger on table "public"."roles" to "anon";

grant truncate on table "public"."roles" to "anon";

grant update on table "public"."roles" to "anon";

grant delete on table "public"."roles" to "authenticated";

grant insert on table "public"."roles" to "authenticated";

grant references on table "public"."roles" to "authenticated";

grant select on table "public"."roles" to "authenticated";

grant trigger on table "public"."roles" to "authenticated";

grant truncate on table "public"."roles" to "authenticated";

grant update on table "public"."roles" to "authenticated";

grant delete on table "public"."roles" to "service_role";

grant insert on table "public"."roles" to "service_role";

grant references on table "public"."roles" to "service_role";

grant select on table "public"."roles" to "service_role";

grant trigger on table "public"."roles" to "service_role";

grant truncate on table "public"."roles" to "service_role";

grant update on table "public"."roles" to "service_role";

grant delete on table "public"."share_company_users" to "anon";

grant insert on table "public"."share_company_users" to "anon";

grant references on table "public"."share_company_users" to "anon";

grant select on table "public"."share_company_users" to "anon";

grant trigger on table "public"."share_company_users" to "anon";

grant truncate on table "public"."share_company_users" to "anon";

grant update on table "public"."share_company_users" to "anon";

grant delete on table "public"."share_company_users" to "authenticated";

grant insert on table "public"."share_company_users" to "authenticated";

grant references on table "public"."share_company_users" to "authenticated";

grant select on table "public"."share_company_users" to "authenticated";

grant trigger on table "public"."share_company_users" to "authenticated";

grant truncate on table "public"."share_company_users" to "authenticated";

grant update on table "public"."share_company_users" to "authenticated";

grant delete on table "public"."share_company_users" to "service_role";

grant insert on table "public"."share_company_users" to "service_role";

grant references on table "public"."share_company_users" to "service_role";

grant select on table "public"."share_company_users" to "service_role";

grant trigger on table "public"."share_company_users" to "service_role";

grant truncate on table "public"."share_company_users" to "service_role";

grant update on table "public"."share_company_users" to "service_role";

grant delete on table "public"."type" to "anon";

grant insert on table "public"."type" to "anon";

grant references on table "public"."type" to "anon";

grant select on table "public"."type" to "anon";

grant trigger on table "public"."type" to "anon";

grant truncate on table "public"."type" to "anon";

grant update on table "public"."type" to "anon";

grant delete on table "public"."type" to "authenticated";

grant insert on table "public"."type" to "authenticated";

grant references on table "public"."type" to "authenticated";

grant select on table "public"."type" to "authenticated";

grant trigger on table "public"."type" to "authenticated";

grant truncate on table "public"."type" to "authenticated";

grant update on table "public"."type" to "authenticated";

grant delete on table "public"."type" to "service_role";

grant insert on table "public"."type" to "service_role";

grant references on table "public"."type" to "service_role";

grant select on table "public"."type" to "service_role";

grant trigger on table "public"."type" to "service_role";

grant truncate on table "public"."type" to "service_role";

grant update on table "public"."type" to "service_role";

grant delete on table "public"."types_of_vehicles" to "anon";

grant insert on table "public"."types_of_vehicles" to "anon";

grant references on table "public"."types_of_vehicles" to "anon";

grant select on table "public"."types_of_vehicles" to "anon";

grant trigger on table "public"."types_of_vehicles" to "anon";

grant truncate on table "public"."types_of_vehicles" to "anon";

grant update on table "public"."types_of_vehicles" to "anon";

grant delete on table "public"."types_of_vehicles" to "authenticated";

grant insert on table "public"."types_of_vehicles" to "authenticated";

grant references on table "public"."types_of_vehicles" to "authenticated";

grant select on table "public"."types_of_vehicles" to "authenticated";

grant trigger on table "public"."types_of_vehicles" to "authenticated";

grant truncate on table "public"."types_of_vehicles" to "authenticated";

grant update on table "public"."types_of_vehicles" to "authenticated";

grant delete on table "public"."types_of_vehicles" to "service_role";

grant insert on table "public"."types_of_vehicles" to "service_role";

grant references on table "public"."types_of_vehicles" to "service_role";

grant select on table "public"."types_of_vehicles" to "service_role";

grant trigger on table "public"."types_of_vehicles" to "service_role";

grant truncate on table "public"."types_of_vehicles" to "service_role";

grant update on table "public"."types_of_vehicles" to "service_role";

grant delete on table "public"."vehicles" to "anon";

grant insert on table "public"."vehicles" to "anon";

grant references on table "public"."vehicles" to "anon";

grant select on table "public"."vehicles" to "anon";

grant trigger on table "public"."vehicles" to "anon";

grant truncate on table "public"."vehicles" to "anon";

grant update on table "public"."vehicles" to "anon";

grant delete on table "public"."vehicles" to "authenticated";

grant insert on table "public"."vehicles" to "authenticated";

grant references on table "public"."vehicles" to "authenticated";

grant select on table "public"."vehicles" to "authenticated";

grant trigger on table "public"."vehicles" to "authenticated";

grant truncate on table "public"."vehicles" to "authenticated";

grant update on table "public"."vehicles" to "authenticated";

grant delete on table "public"."vehicles" to "service_role";

grant insert on table "public"."vehicles" to "service_role";

grant references on table "public"."vehicles" to "service_role";

grant select on table "public"."vehicles" to "service_role";

grant trigger on table "public"."vehicles" to "service_role";

grant truncate on table "public"."vehicles" to "service_role";

grant update on table "public"."vehicles" to "service_role";

grant delete on table "public"."work-diagram" to "anon";

grant insert on table "public"."work-diagram" to "anon";

grant references on table "public"."work-diagram" to "anon";

grant select on table "public"."work-diagram" to "anon";

grant trigger on table "public"."work-diagram" to "anon";

grant truncate on table "public"."work-diagram" to "anon";

grant update on table "public"."work-diagram" to "anon";

grant delete on table "public"."work-diagram" to "authenticated";

grant insert on table "public"."work-diagram" to "authenticated";

grant references on table "public"."work-diagram" to "authenticated";

grant select on table "public"."work-diagram" to "authenticated";

grant trigger on table "public"."work-diagram" to "authenticated";

grant truncate on table "public"."work-diagram" to "authenticated";

grant update on table "public"."work-diagram" to "authenticated";

grant delete on table "public"."work-diagram" to "service_role";

grant insert on table "public"."work-diagram" to "service_role";

grant references on table "public"."work-diagram" to "service_role";

grant select on table "public"."work-diagram" to "service_role";

grant trigger on table "public"."work-diagram" to "service_role";

grant truncate on table "public"."work-diagram" to "service_role";

grant update on table "public"."work-diagram" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."brand_vehicles"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."brand_vehicles"
as permissive
for select
to authenticated
using (true);


create policy "Enable read access for all users"
on "public"."cities"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."companies_employees"
as permissive
for all
to public
using (true);


create policy "Enable insert for authenticated users only"
on "public"."company"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."company"
as permissive
for select
to public
using (true);


create policy "update company"
on "public"."company"
as permissive
for update
to authenticated
using (true);


create policy "Enable insert for authenticated users only"
on "public"."contractor_employee"
as permissive
for all
to authenticated
using (true)
with check (true);


create policy "Enable read access for all users"
on "public"."contractor_employee"
as permissive
for all
to authenticated
using (true);


create policy "Enable insert for authenticated users only"
on "public"."contractors"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."contractors"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."countries"
as permissive
for select
to public
using (true);


create policy "Enable insert for authenticated users onlyS"
on "public"."document_types"
as permissive
for insert
to public
with check (true);


create policy "Enable read access for all users"
on "public"."document_types"
as permissive
for all
to public
using (true)
with check (true);


create policy "Enable insert for authenticated users only"
on "public"."documents_employees"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."documents_employees"
as permissive
for select
to public
using (true);


create policy "update"
on "public"."documents_employees"
as permissive
for update
to authenticated
using (true)
with check (true);


create policy "Enable insert for authenticated users only"
on "public"."documents_equipment"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."documents_equipment"
as permissive
for select
to public
using (true);


create policy "update"
on "public"."documents_equipment"
as permissive
for update
to authenticated
using (true)
with check (true);


create policy "Enable insert for authenticated users only"
on "public"."employees"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."employees"
as permissive
for select
to public
using (true);


create policy "New Policy Name"
on "public"."employees"
as permissive
for update
to public
using ((auth.uid() IN ( SELECT company.owner_id
   FROM company
  WHERE (employees.company_id = employees.company_id))));


create policy "Todos los permisos para los due√±os de le empresa"
on "public"."employees"
as permissive
for all
to authenticated
using (true);


create policy "Enable read access for all users"
on "public"."hierarchy"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."industry_type"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."model_vehicles"
as permissive
for all
to authenticated
using (true);


create policy "Enable read access for all userss"
on "public"."model_vehicles"
as permissive
for all
to authenticated;


create policy "Enable delete"
on "public"."notifications"
as permissive
for delete
to public
using (true);


create policy "Enable insert access for all users"
on "public"."notifications"
as permissive
for insert
to public
with check (true);


create policy "Enable read access for all users"
on "public"."notifications"
as permissive
for select
to public
using (true);


create policy "Enable acces for users serviceRole"
on "public"."profile"
as permissive
for all
to anon, authenticated, pgsodium_keyholder, pgsodium_keyiduser, pgsodium_keymaker, service_role, supabase_read_only_user, supabase_replication_admin
using (true)
with check (true);


create policy "Enable read access for all users"
on "public"."profile"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."provinces"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."roles"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."share_company_users"
as permissive
for select
to public
using (true);


create policy "permisos"
on "public"."share_company_users"
as permissive
for all
to authenticated
using (true)
with check (true);


create policy "Enable read access for all users"
on "public"."type"
as permissive
for select
to authenticated
using (true);


create policy "Enable insert for authenticated users only"
on "public"."types_of_vehicles"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."types_of_vehicles"
as permissive
for select
to authenticated
using (true);


create policy "Enable read access for all users"
on "public"."vehicles"
as permissive
for select
to authenticated
using (true);


create policy "update_vehicles"
on "public"."vehicles"
as permissive
for all
to public
using ((auth.uid() = user_id));


create policy "Enable read access for all users"
on "public"."work-diagram"
as permissive
for select
to public
using (true);


CREATE TRIGGER update_company_by_defect_trigger AFTER INSERT OR UPDATE OF by_defect ON public.company FOR EACH ROW EXECUTE FUNCTION update_company_by_defect();

CREATE TRIGGER add_new_document_trigger AFTER INSERT ON public.document_types FOR EACH ROW EXECUTE FUNCTION add_new_document();

CREATE TRIGGER document_employee_changes_trigger AFTER INSERT OR UPDATE ON public.documents_employees FOR EACH ROW EXECUTE FUNCTION log_document_employee_changes();

CREATE TRIGGER document_update_trigger AFTER UPDATE OF state ON public.documents_employees FOR EACH ROW EXECUTE FUNCTION notify_document_update();

CREATE TRIGGER document_equipment_changes_trigger AFTER INSERT OR UPDATE ON public.documents_equipment FOR EACH ROW EXECUTE FUNCTION log_document_equipment_changes();

CREATE TRIGGER equipment_update_trigger AFTER UPDATE OF state ON public.documents_equipment FOR EACH ROW EXECUTE FUNCTION notify_document_update();

CREATE TRIGGER after_employee_insert AFTER INSERT ON public.employees FOR EACH ROW EXECUTE FUNCTION add_to_companies_employees();


